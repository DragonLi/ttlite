let appendType = forall (a :: *) (_ :: List a) (_ :: List a) . List a;
let append =
  (\(a :: *) (xs :: List a) (ys :: List a) ->
    listElim a
        (\ (_ :: List a) -> List a)
        ys
        (\ (v :: a) (vs :: List a) (w :: List a) -> Cons a v w) xs) ::
            appendType;

let X = (forall (a :: *). a);
assume (x :: X);

let l1 = Cons X x (Nil X);

append X l1 l1;
