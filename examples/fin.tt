import "examples/core.tt";

let Void = Fin_0;
-- unit type
let Unit = Fin_1;
-- constructor
let U = finElem_1_1;

-- booleans
let Bool = Fin_2;
-- constructors
let False = finElem_1_2;
let True  = finElem_2_2;

let abort =
    \(m :: Set) (v :: Void) -> finElim_0 ( \(_ :: Void) -> m) v;

let boolElim =
    \ (m :: forall (_ :: Fin_2) . Set) (c1 :: m False) (c2 :: m True) (b :: Fin_2) .
        finElim_2 m c1 c2 b;

--let Prop = boolElim (\ (_ :: Bool) -> Set) Void Unit;

let not = boolElim (\ (_ :: Bool) -> Bool) True False;
let and = boolElim (\ (_ :: Bool) -> forall (_ :: Bool) . Bool) (\ (_ :: Bool) -> False) (id Bool);

let or  = boolElim (\ (_ :: Bool) -> forall (_ :: Bool) . Bool) (id Bool) (\ (_ :: Bool) -> True);
let xor = boolElim (\ (_ :: Bool) -> forall (_ :: Bool) . Bool) (id Bool) not;
let if  = boolElim (\ (_ :: Bool) -> forall (_ :: Bool) . Bool) not (id Bool);

let fin1_id =
    \ (e :: Fin_1) ->
        finElim_1
            (\ (_ :: Fin_1) -> Fin_1)
            finElem_1_1
            e;

let fin2_id =
    \ (e :: Fin_2) ->
        finElim_2
            (\ (_ :: Fin_2) -> Fin_2)
            finElem_1_2
            finElem_2_2
            e;

