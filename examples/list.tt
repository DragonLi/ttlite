let map =
    \ (A :: Set) (B :: Set) (f :: forall (_ :: A). B) (xs :: List A) ->
        listElim
            A
            (\ (_ :: List A) -> List B)
            (Nil B)
            (\ (h :: A) (t :: List A) (rec :: List B) -> Cons B (f h) rec )
            xs;
