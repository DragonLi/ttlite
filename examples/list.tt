let map =
    \ (A :: Set) (B :: Set) (f :: forall (_ :: A). B) (xs :: List A) ->
        listElim
            A
            (\ (_ :: List A) -> List B)
            (Nil B)
            (\ (h :: A) (t :: List A) (rec :: List B) -> Cons B (f h) rec )
            xs;

let append =
    \ (a :: Set) (xs :: List a) (ys :: List a) ->
        listElim
            a
            (\(_ :: List a) -> List a)
            ys
            (\ (v :: a) (vs :: List a) (w :: List a) -> Cons a v w)
            xs;

let unit =
    \ (A :: Set) (x :: A) -> Cons A x (Nil A);

let list_id =
    \ (A :: Set) (xs :: List A) ->
        listElim
            A
            (\ (_ :: List A) -> List A)
            (Nil A)
            (\ (h :: A) (t :: List A) (rec :: List A) -> Cons A h rec)
            xs;
