import "examples/core.tt";
import "examples/list.tt";
import "examples/eq.tt";

-- compose (map f) unit = compose unit f
-- http://hosc.appspot.com/test?key=agRob3NjcjELEgZBdXRob3IiGmlseWEua2x5dWNobmlrb3ZAZ21haWwuY29tDAsSBFRlc3QYuxcM
-- we even do not need supercompilation here: normalization is enough

assume ($A :: Set) ($B :: Set) ($f :: forall (_ :: $A). $B);
assume ($x :: $A);

let e1 = comp $A $B (List $B) (unit $B) $f;
let e2 = comp $A (List $A) (List $B) (map $A $B $f) (unit $A);

let proof = Refl (forall (_ :: $A) . List $B) e1 :: Eq (forall (_ :: $A) . List $B) e1 e2;
