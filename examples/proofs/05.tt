import "examples/eq.tt";
import "examples/list.tt";

-- map f (append xs ys) = append (map f xs) (map f ys)

assume
    ($A :: Set)
    ($B :: Set)
    ($f :: forall (_ :: $A). $B)
    ($xs :: List $A)
    ($ys :: List $A);

let e1 = map $A $B $f (append $A $xs $ys);
let e2 = append $B (map $A $B $f $xs) (map $A $B $f $ys);

let (res1, proof1) = sc_with_proof e1;
let (res2, proof2) = sc_with_proof e2;

-- check that t1 and t2 are supercompiled into the same expression
let eq_res1_res2 = Refl (List $B) res1 :: Eq (List $B) res1 res2;
-- deriving equality
let eq_e1_e2 =
    proof_by_sc (List $B) e1 e2 res1 proof1 proof2 :: Eq (List $B) e1 e2;
