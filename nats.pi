-- basic functions over natural numbers

-- addition of natural numbers
let plus =
  natElim
    ( \ _ -> Nat -> Nat )              -- motive
    ( \ n -> n )                       -- case for Zero
    ( \ _ rec -> \n -> Succ (rec n));  -- case for Succ

-- alternative (more readable??) variation of plus
let plus1 =
  (\x y ->
    natElim
    ( \ _ -> Nat )                -- motive
    y                             -- case for Zero
    (\ n rec -> Succ rec) x) ::   -- case for Succ
    forall (a :: Nat) (b :: Nat) . Nat;

-- predecessor, mapping 0 to 0
let pred =
  natElim
    ( \ _ -> Nat )
    Zero
    ( \ n1 _ -> n1 );

-- a simpler elimination scheme for natural numbers
-- type of result doesn't depend on n
let natFold =
  ( \ m mz ms -> natElim
                   ( \ _ -> m )
                   mz
                   ( \ _ rec -> ms rec ) )
  :: forall (a :: *) . a -> (a -> a) -> Nat -> a;

-- an eliminator for natural numbers that has special
-- cases for 0 and 1
let nat1Elim =
  ( \ m m0 m1 ms -> natElim m m0
                            (\ p rec -> natElim (\ n -> m (Succ n)) m1 ms p) )
  :: forall (m :: Nat -> *) . m 0 -> m 1 ->
     (forall n :: Nat . m (Succ n) -> m (Succ (Succ n))) ->
     forall (n :: Nat) . m n;

-- an eliminator for natural numbers that has special
-- cases for 0, 1 and 2
let nat2Elim =
  ( \ m m0 m1 m2 ms -> nat1Elim m m0 m1
                                (\ p rec -> natElim (\ n -> m (Succ (Succ n))) m2 ms p) )
  :: forall (m :: Nat -> *) . m 0 -> m 1 -> m 2 ->
     (forall n :: Nat . m (Succ (Succ n)) -> m (Succ (Succ (Succ n)))) ->
     forall (n :: Nat) . m n;

-- increment by one
let inc = natFold Nat (Succ Zero) Succ;
