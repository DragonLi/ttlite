let id    = (\ a x -> x) :: forall (a :: *) . a -> a;
let const = (\ a b x y -> x) :: forall (a :: *) (b :: *) . a -> b -> a;

// addition of natural numbers
let plus =
  natElim
    ( \ _ -> Nat -> Nat )           // motive
    ( \ n -> n )                    // case for Zero
    ( \ p rec n -> Succ (rec n) );   // case for Succ

// predecessor, mapping 0 to 0
let pred =
  natElim
    ( \ _ -> Nat )
    Zero
    ( \ n1 _rec -> n1 );

// a simpler elimination scheme for natural numbers
let natFold =
  ( \ m mz ms -> natElim
                   ( \ _ -> m )
                   mz
                   ( \ n1 rec -> ms rec ) )
  :: forall (m :: *) . m -> (m -> m) -> Nat -> m;

// TODO: parser for 0, 1, 2,