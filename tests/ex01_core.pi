Set0 :: Set1;

(forall (x :: Set0) . Set0) :: Set1;
(forall (x :: Set1) . Set0) :: Set2;
(forall (x :: Set1) . Set1) :: Set2;

let t = \ (x :: Set) -> x;

let id  = (\ (a :: Set) (x :: a) . x )
    :: forall (a :: Set) (x :: a) . a;

let const = (\ (a :: Set) (b :: Set) (x :: a) (y :: b) -> x)
    :: forall (a :: Set) (b :: Set) (_ :: a) (_ :: b) . a;

let const1 = (\ (a :: Set) (x :: a) (b :: Set) (y :: b) -> x)
    :: forall (a :: Set) (_ :: a) (b :: Set) (_ :: b) . a;
