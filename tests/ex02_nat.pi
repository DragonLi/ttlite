-- addition of natural numbers
let plus =
    \ (n :: Nat) .
        natElim
            (\ (_ :: Nat) . forall (_ :: Nat) . Nat )
            (\ (n :: Nat) . n )
            (\ (p :: Nat) (rec :: forall (_ :: Nat) . Nat) (n :: Nat) -> Succ (rec n) )
            n;

let x = Zero :: Nat;

-- predecessor, mapping 0 to 0
let pred =
    \ (n :: Nat) .
        natElim
            ( \ (_ :: Nat) . Nat )
            Zero
            ( \ (n1 :: Nat) (rec :: Nat) . n1 )
            n;

-- a simpler elimination scheme for natural numbers:
-- a result type doesn't depend on n
let natFold =
    ( \ (m :: Set) (mz :: m) (ms :: forall (_ :: m) . m) (n :: Nat) ->
        natElim
            (\ (_ :: Nat) -> m )
             mz
             (\ (n1 :: Nat) (rec :: m) -> ms rec )
             n )
  :: forall (m :: Set) (_ :: m) (_ :: forall (_ :: m) . m) (_ :: Nat) . m;
