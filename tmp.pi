\ (a :: Nat) ->
natElim
    (\ (b :: Nat) -> Eq Nat
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                (natElim (\ (c :: Nat) -> forall d :: Nat . Nat)
                    (\ (c :: Nat) -> c)
                    (\ (c :: Nat) -> \ (d :: forall d :: Nat . Nat) -> \ (e :: Nat) -> Succ
                                    (d e))
                    b
                    (Succ Zero)))
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                b))
    (Refl Nat Zero)
    (\ (b :: Nat) -> \ (c :: Eq Nat
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                (natElim (\ (c :: Nat) -> forall d :: Nat . Nat)
                    (\ (c :: Nat) -> c)
                    (\ (c :: Nat) -> \ (d :: forall d :: Nat . Nat) -> \ (e :: Nat) -> Succ
                                    (d e))
                    b
                    (Succ Zero)))
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                b)) -> c)
    a

\ (a :: Nat) -> natElim
    (\ (b :: Nat) -> Eq Nat
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                (natElim (\ (c :: Nat) -> forall d :: Nat . Nat)
                    (\ (c :: Nat) -> c)
                    (\ (c :: Nat) -> \ (d :: forall d :: Nat . Nat) -> \ (e :: Nat) -> Succ
                                    (d e))
                    b
                    (Succ Zero)))
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                b))
    (Refl Nat Zero)
    (\ (b :: Nat) -> \ (c :: Eq Nat
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                (natElim (\ (c :: Nat) -> forall d :: Nat . Nat)
                    (\ (c :: Nat) -> c)
                    (\ (c :: Nat) -> \ (d :: forall d :: Nat . Nat) -> \ (e :: Nat) -> Succ
                                    (d e))
                    b
                    (Succ Zero)))
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> d)
                b)) -> natElim (\ (d :: Nat) -> Nat) Zero
                (\ (d :: Nat) -> \ (e :: Nat) -> e)
                a)
    a