let id  = (\ (a :: *) (x :: a) -> x )
    :: forall (a :: *) . a -> a;
let const = (\ (a :: *) (b :: *) (x :: a) (y :: b) -> x)
    :: forall (a :: *). forall (b :: *) . a -> b -> a;


// addition of natural numbers
let plus =
  natElim
    ( \ (_ :: Nat) -> Nat -> Nat )           -- motive
    ( \ (n :: Nat) -> n )                    -- case for Zero
    ( \ (p :: Nat) (rec :: Nat -> Nat) (n :: Nat) -> Succ (rec n) );   -- case for Succ

-- predecessor, mapping 0 to 0
let pred =
  natElim
    ( \ (_ :: Nat) -> Nat )
    Zero
    ( \ (n1 :: Nat) (rec :: Nat) -> n1 );

-- a simpler elimination scheme for natural numbers
let natFold =
  ( \ (m :: *) (mz :: m) (ms :: m -> m) ->
            natElim
                   ( \ (_ :: Nat) -> m )
                   mz
                   ( \ (n1 :: Nat) (rec :: m) -> ms rec ) )
  :: forall (m :: *) . m -> (m -> m) -> Nat -> m;

-- special case for 1
let nat1Elim =
  ( \ (m :: Nat -> *)
      (m0 :: m 0)
      (m1 :: m 1)
      (ms :: forall (a :: Nat) . (m (Succ a)) -> m (Succ (Succ a))) ->
        natElim
            m
            m0
            (\ (p :: Nat) (rec :: m p) -> natElim (\ (n :: Nat) -> m (Succ n)) m1 ms p) )
  :: forall (m :: Nat -> *) . m 0 -> m 1 ->
     (forall n :: Nat . m (Succ n) -> m (Succ (Succ n))) ->
     forall (n :: Nat) . m n;