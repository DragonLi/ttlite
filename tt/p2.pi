\ (a :: Nat) -> natElim
    (\ (b :: Nat) -> Eq Nat
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> Succ d)
                b)
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> Succ d)
                b))
    (Refl Nat Zero)
    (\ (b :: Nat) -> \ (c :: Eq Nat
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> Succ d)
                b)
            (natElim (\ (c :: Nat) -> Nat) Zero
                (\ (c :: Nat) -> \ (d :: Nat) -> Succ d)
                b)) ->
            cong1 Nat Nat Succ
                (natElim (\ (d :: Nat) -> Nat) Zero
                    (\ (d :: Nat) -> \ (e :: Nat) -> Succ e)
                    b)
                c
                c)
    a

===

\ (a :: Nat) -> \ (b :: Eq Nat
    (natElim (\ (b :: Nat) -> Nat) Zero
        (\ (b :: Nat) -> \ (c :: Nat) -> Succ c)
        xx)
    a) -> eqElim Nat
        (\ (c :: Nat) -> \ (d :: Nat) -> \ (e :: Eq Nat c d) -> Eq Nat
                        (Succ c)
                        (Succ d))
        (\ (c :: Nat) -> Refl Nat (Succ c))
        (natElim (\ (c :: Nat) -> Nat) Zero
            (\ (c :: Nat) -> \ (d :: Nat) -> Succ d)
            xx)
        a
        b :!!: forall
    (a :: Nat)
    (b :: Eq Nat
        (natElim (\ (b :: Nat) -> Nat) Zero
            (\ (b :: Nat) -> \ (c :: Nat) -> Succ c)
            xx)
        a) .
    Eq Nat
    (Succ
        (natElim (\ (c :: Nat) -> Nat) Zero
            (\ (c :: Nat) -> \ (d :: Nat) -> Succ d)
            xx))
    (Succ a)