let id  = (\ (a :: *) (x :: a) -> x )
    :: forall (a :: *) . a -> a;
let const = (\ (a :: *) (b :: *) (x :: a) (y :: b) -> x)
    :: forall (a :: *). forall (b :: *) . a -> b -> a;


-- addition of natural numbers
let plus =
  natElim
    ( \ (_ :: Nat) -> Nat -> Nat )           -- motive
    ( \ (n :: Nat) -> n )                    -- case for Zero
    ( \ (p :: Nat) (rec :: Nat -> Nat) (n :: Nat) -> Succ (rec n) );   -- case for Succ

-- alternative (more readable??) variation of plus
let plus1 =
  (\(x :: Nat) (y :: Nat) ->
    natElim
    ( \ (_ :: Nat) -> Nat )                -- motive
    y                             -- case for Zero
    (\ (n :: Nat) (rec :: Nat) -> Succ rec) x) ::   -- case for Succ
    forall (a :: Nat) (b :: Nat) . Nat;

-- predecessor, mapping 0 to 0
let pred =
  natElim
    ( \ (_ :: Nat) -> Nat )
    Zero
    ( \ (n1 :: Nat) (_ :: Nat) -> n1 );

-- fZSucc0 Z        = a1 :: A
-- fZSucc0 (Succ _) = a2 :: A
-- this function allows to eliminate nats
-- in simple (homo) way
let fZSucc0 =
    (\(A :: *) (a1 :: A) (a2 :: A) -> natElim (\(_ :: Nat) -> A) a1 (\(_ :: Nat) (pred :: A) -> a2))
    :: forall (A :: *) (a1 :: A) (a2 :: A) . Nat -> A;

-- a simpler elimination scheme for natural numbers
-- type of result doesn't depend on n
-- a simpler elimination scheme for natural numbers
let natFold =
  ( \ (m :: *) (mz :: m) (ms :: m -> m) ->
            natElim
                   ( \ (_ :: Nat) -> m )
                   mz
                   ( \ (n1 :: Nat) (rec :: m) -> ms rec ) )
  :: forall (m :: *) . m -> (m -> m) -> Nat -> m;

-- special case for 1
let nat1Elim =
  ( \ (m :: Nat -> *)
      (m0 :: m 0)
      (m1 :: m 1)
      (ms :: forall (a :: Nat) . (m (Succ a)) -> m (Succ (Succ a))) ->
        natElim
            m
            m0
            (\ (p :: Nat) (rec :: m p) -> natElim (\ (n :: Nat) -> m (Succ n)) m1 ms p) )
  :: forall (m :: Nat -> *) . m 0 -> m 1 ->
     (forall n :: Nat . m (Succ n) -> m (Succ (Succ n))) ->
     forall (n :: Nat) . m n;

-- increment by one
let inc = natFold Nat (Succ Zero) Succ;

let appendType = forall (a :: *) . forall (_ :: List a) . forall (_ :: List a) . List a;
let append =
  (\(a :: *) (xs :: List a) (ys :: List a) ->
    listElim a (\(_ :: List a) -> List a) ys (\ (v :: a) (vs :: List a) (w :: List a) -> Cons a v w) xs) ::
        appendType;

let len =
  (\ (a :: *) -> listElim a (\ (_ :: List a) -> Nat) 0 (\ (v :: a) (vs :: List a) (w :: Nat) -> Succ w)) ::
    forall (a :: *) . forall (v :: List a) . Nat;

-- supercompiling everything
sc id;
sc const;
sc plus;
sc plus1;
sc pred;
sc fZSucc0;
sc natFold;
sc nat1Elim;
sc inc;
sc append;
sc len;

let nat2Elim =
  ( \ (m :: Nat -> *) -> natElim (\ (n :: Nat) -> m (Succ n))) ;

sc nat2Elim;

assume (A :: *);
let LA = List A;

sc (\(a :: *) (x :: List a) (y :: List a) (z :: List a) -> append a x (append a y z));

sc (\ (x :: List A) (y :: List A) (z :: List A) -> append A x (append A y z));

let fst = (\ (a :: *) (b :: *) (p :: Product a b) ->
                    productElim a b (\ (_ :: Product a b) -> a) (\(x :: a) (y :: b) -> x) p);
let snd = (\ (a :: *) (b :: *) (p :: Product a b) ->
                    productElim a b (\ (_ :: Product a b) -> b) (\(x :: a) (y :: b) -> y) p);


sc productElim;
sc fst;
sc snd;

let xxx = (\(A :: *) (B :: *) (C :: *) (p :: Product (Product A B) C) -> (fst A B (fst (Product A B) C p)));
sc xxx;

let yyy = (\(A :: *) (B :: *) (C :: *) (p :: Product (Product A B) C) ->
    (fst (Product A B) C p));
sc yyy;


let th2 =
    forall (A :: *) (B :: *) (C :: *) .
        Product (Product A B) C -> Product A (Product B C);

-- p1 = fst (Product A B) C p
-- a = fst A B p1 = fst A B (fst (Product A B) C p)
-- b = snd A B p1 = snd A B (fst (Product A B) C p)
-- c = snd (Product A B) C p
-- (b, c) = Pair B C b c = Pair B C (snd A B (fst (Product A B) C p)) (snd (Product A B) C p)
-- (a, (b, c)) = Pair A (Product B C) a (b, c) =
--   =  Pair A (Product B C) (fst A B (fst (Product A B) C p)) (Pair B C (snd A B (fst (Product A B) C p)) (snd (Product A B) C p))

let pr2 =
    (\(A :: *) (B :: *) (C :: *) (p :: Product (Product A B) C)->
        Pair A (Product B C)
            (fst A B (fst (Product A B) C p))
            (Pair B C (snd A B (fst (Product A B) C p)) (snd (Product A B) C p))) :: th2;

sc pr2;





