let id  = (\ (a :: *) (x :: a) -> x )
    :: forall (a :: *) . a -> a;
let const = (\ (a :: *) (b :: *) (x :: a) (y :: b) -> x)
    :: forall (a :: *). forall (b :: *) . a -> b -> a;


-- addition of natural numbers
let plus =
  natElim
    ( \ (_ :: Nat) -> Nat -> Nat )           -- motive
    ( \ (n :: Nat) -> n )                    -- case for Zero
    ( \ (p :: Nat) (rec :: Nat -> Nat) (n :: Nat) -> Succ (rec n) );   -- case for Succ

-- alternative (more readable??) variation of plus
let plus1 =
  (\(x :: Nat) (y :: Nat) ->
    natElim
    ( \ (_ :: Nat) -> Nat )                -- motive
    y                             -- case for Zero
    (\ (n :: Nat) (rec :: Nat) -> Succ rec) x) ::   -- case for Succ
    forall (a :: Nat) (b :: Nat) . Nat;

-- predecessor, mapping 0 to 0
let pred =
  natElim
    ( \ (_ :: Nat) -> Nat )
    Zero
    ( \ (n1 :: Nat) (_ :: Nat) -> n1 );

-- fZSucc0 Z        = a1 :: A
-- fZSucc0 (Succ _) = a2 :: A
-- this function allows to eliminate nats
-- in simple (homo) way
let fZSucc0 =
    (\(A :: *) (a1 :: A) (a2 :: A) -> natElim (\(_ :: Nat) -> A) a1 (\(_ :: Nat) (pred :: A) -> a2))
    :: forall (A :: *) (a1 :: A) (a2 :: A) . Nat -> A;

-- supercompiling everything
sc id;
sc const;
sc plus;
sc plus1;
sc pred;
sc fZSucc0;

