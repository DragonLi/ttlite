let leibniz =
  ( \ (a :: *) (b :: *) (f :: a -> b) ->
        eqElim a
            (\ (x :: a) (y :: a) (eq_x_y :: Eq a x y) -> Eq b (f x) (f y)) -- prop = x y eq_x_y, when substituting, we have Eq b (f x) (f x)
            (\ (x :: a) -> Refl b (f x)) );
  --:: forall (a :: *) (b :: *) (f :: a -> b) (x :: a) (y :: a) . Eq a x y -> Eq b (f x) (f y);

let scLeibniz =
(\ (a :: *) -> \ (b :: *) -> \ (c :: forall c :: a . b) -> \ (d :: a) -> \ (e :: a) -> \ (f :: Eq
                    a
                    d
                    e) -> eqElim a
                        (\ (g :: a) -> \ (h :: a) -> \ (i :: Eq a g h) -> Eq
                                        b
                                        (c g)
                                        (c h))
                        (\ (g :: a) -> Refl b (c g))
                        d
                        e
                        f);

